/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module testing_2 (
    input clk,
    input rst,
    output reg a,
    output reg b,
    output reg cin,
    input s,
    input cout,
    input [4:0] io_button,
    output reg [3:0] first,
    output reg [3:0] second,
    output reg [3:0] third,
    output reg [3:0] fourth
  );
  
  
  
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  localparam ONE_state = 4'd0;
  localparam TWO_state = 4'd1;
  localparam THREE_state = 4'd2;
  localparam FOUR_state = 4'd3;
  localparam FIVE_state = 4'd4;
  localparam SIX_state = 4'd5;
  localparam SEVEN_state = 4'd6;
  localparam EIGHT_state = 4'd7;
  localparam ERROR_state = 4'd8;
  localparam PASS_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = ONE_state;
  localparam MANUAL_mode = 1'd0;
  localparam AUTO_mode = 1'd1;
  
  reg M_mode_d, M_mode_q = MANUAL_mode;
  
  always @* begin
    M_state_d = M_state_q;
    M_mode_d = M_mode_q;
    M_counter_d = M_counter_q;
    
    M_counter_d = M_counter_q + 1'h1;
    a = 1'h0;
    b = 1'h0;
    cin = 1'h0;
    first = 4'hb;
    second = 4'hc;
    third = 4'hc;
    fourth = 4'hd;
    
    case (M_mode_q)
      MANUAL_mode: begin
        if (io_button[1+0-:1] == 1'h1) begin
          M_mode_d = AUTO_mode;
        end
      end
    endcase
    if (M_mode_q == AUTO_mode) begin
      
      case (M_state_q)
        ONE_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h0;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (s == 1'h0 && cout == 1'h0) begin
              M_state_d = TWO_state;
            end else begin
              M_state_d = ERROR_state;
            end
          end
        end
        TWO_state: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h0;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (s == 1'h1 && cout == 1'h0) begin
              M_state_d = THREE_state;
            end else begin
              M_state_d = ERROR_state;
            end
          end
        end
        THREE_state: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h0;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (s == 1'h1 && cout == 1'h0) begin
              M_state_d = FOUR_state;
            end else begin
              M_state_d = ERROR_state;
            end
          end
        end
        FOUR_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h1;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (s == 1'h1 && cout == 1'h0) begin
              M_state_d = FIVE_state;
            end else begin
              M_state_d = ERROR_state;
            end
          end
        end
        FIVE_state: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h0;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (s == 1'h0 && cout == 1'h1) begin
              M_state_d = SIX_state;
            end else begin
              M_state_d = ERROR_state;
            end
          end
        end
        SIX_state: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h1;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (s == 1'h0 && cout == 1'h1) begin
              M_state_d = SEVEN_state;
            end else begin
              M_state_d = ERROR_state;
            end
          end
        end
        SEVEN_state: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h1;
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (s == 1'h0 && cout == 1'h1) begin
              M_state_d = EIGHT_state;
            end else begin
              M_state_d = ERROR_state;
            end
          end
        end
        EIGHT_state: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h1;
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (s == 1'h1 && cout == 1'h1) begin
              M_state_d = EIGHT_state;
              M_mode_d = MANUAL_mode;
            end else begin
              M_state_d = EIGHT_state;
              M_mode_d = MANUAL_mode;
            end
          end
        end
        ERROR_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h0;
          first = 4'ha;
          second = 4'ha;
          third = 4'ha;
          fourth = 4'ha;
          M_mode_d = MANUAL_mode;
        end
      endcase
    end else begin
      
      case (M_state_q)
        ONE_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h0;
          if (s == 1'h0 && cout == 1'h0) begin
            first = 4'hb;
            second = 4'hc;
            third = 4'hc;
            fourth = 4'hd;
          end else begin
            first = 4'ha;
            second = 4'ha;
            third = 4'ha;
            fourth = 4'ha;
          end
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (io_button[3+0-:1] == 1'h1) begin
              M_state_d = EIGHT_state;
            end else begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = TWO_state;
              end
            end
          end
        end
        TWO_state: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h0;
          if (s == 1'h1 && cout == 1'h0) begin
            first = 4'hb;
            second = 4'hc;
            third = 4'hc;
            fourth = 4'hd;
          end else begin
            first = 4'ha;
            second = 4'ha;
            third = 4'ha;
            fourth = 4'ha;
          end
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (io_button[3+0-:1] == 1'h1) begin
              M_state_d = ONE_state;
            end else begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = THREE_state;
              end
            end
          end
        end
        THREE_state: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h0;
          if (s == 1'h1 && cout == 1'h0) begin
            first = 4'hb;
            second = 4'hc;
            third = 4'hc;
            fourth = 4'hd;
          end else begin
            first = 4'ha;
            second = 4'ha;
            third = 4'ha;
            fourth = 4'ha;
          end
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (io_button[3+0-:1] == 1'h1) begin
              M_state_d = TWO_state;
            end else begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = FOUR_state;
              end
            end
          end
        end
        FOUR_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h1;
          if (s == 1'h1 && cout == 1'h0) begin
            first = 4'hb;
            second = 4'hc;
            third = 4'hc;
            fourth = 4'hd;
          end else begin
            first = 4'ha;
            second = 4'ha;
            third = 4'ha;
            fourth = 4'ha;
          end
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (io_button[3+0-:1] == 1'h1) begin
              M_state_d = THREE_state;
            end else begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = FIVE_state;
              end
            end
          end
        end
        FIVE_state: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h0;
          if (s == 1'h0 && cout == 1'h1) begin
            first = 4'hb;
            second = 4'hc;
            third = 4'hc;
            fourth = 4'hd;
          end else begin
            first = 4'ha;
            second = 4'ha;
            third = 4'ha;
            fourth = 4'ha;
          end
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (io_button[3+0-:1] == 1'h1) begin
              M_state_d = FOUR_state;
            end else begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = SIX_state;
              end
            end
          end
        end
        SIX_state: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h1;
          if (s == 1'h0 && cout == 1'h1) begin
            first = 4'hb;
            second = 4'hc;
            third = 4'hc;
            fourth = 4'hd;
          end else begin
            first = 4'ha;
            second = 4'ha;
            third = 4'ha;
            fourth = 4'ha;
          end
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (io_button[3+0-:1] == 1'h1) begin
              M_state_d = FIVE_state;
            end else begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = SEVEN_state;
              end
            end
          end
        end
        SEVEN_state: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h1;
          if (s == 1'h0 && cout == 1'h1) begin
            first = 4'hb;
            second = 4'hc;
            third = 4'hc;
            fourth = 4'hd;
          end else begin
            first = 4'ha;
            second = 4'ha;
            third = 4'ha;
            fourth = 4'ha;
          end
          if (M_counter_q[26+0-:1] == 1'h1) begin
            if (io_button[3+0-:1] == 1'h1) begin
              M_state_d = SIX_state;
            end else begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = EIGHT_state;
              end
            end
          end
        end
        EIGHT_state: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h1;
          if (s == 1'h1 && cout == 1'h1) begin
            first = 4'hb;
            second = 4'hc;
            third = 4'hc;
            fourth = 4'hd;
          end else begin
            first = 4'ha;
            second = 4'ha;
            third = 4'ha;
            fourth = 4'ha;
          end
          if (M_counter_q[26+0-:1] == 1'h0) begin
            if (io_button[3+0-:1] == 1'h1) begin
              M_state_d = SEVEN_state;
            end else begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = ONE_state;
              end
            end
          end
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
      M_mode_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
      M_mode_q <= M_mode_d;
    end
  end
  
endmodule
